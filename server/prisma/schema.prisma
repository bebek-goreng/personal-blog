// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  role      Role      @default(User)
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Post {
  id               Int            @id @default(autoincrement())
  userId           Int
  title            String
  content          String
  slug             String         @unique
  featuredImageUrl String?
  publishedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  user             User           @relation(fields: [userId], references: [id])
  comments         Comment[]
  postCategories   PostCategory[]
  likes            Like[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  postId    Int
  userId    Int
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  post      Post      @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Category {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
  postCategories PostCategory[]
}

model PostCategory {
  postId     Int
  categoryId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  post     Post     @relation(fields: [postId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
}

model Like {
  id        Int       @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  post      Post      @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

enum Role {
  Admin
  User
}
